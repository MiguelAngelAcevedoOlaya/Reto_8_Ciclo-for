# -*- coding: utf-8 -*-
"""Reto_8

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/166c9RrRNtdTkYir3HqHnSKvu541EdE6E
"""

# Punto 1
for i in range(1, 101, 1):
  print(str(i)+ " y su cuadrado es " +str(i**2))

# Punto 2
for i in range(2, 1000, 2):
  print(i, "Es par")
print("Hasta aqui van los pares")
for i in range(1, 1000, 1):
  print(i, "Es impar")
print("Hasta aqui van los impares")

# Punto 3
numero = int(input("Ingrese el numero que desees: "))
if numero % 2 == 0:
  print("Los pares menores o iguales a " +str(numero)+ " son:")
  for numero in range(numero, 1 ,-2):
    print(numero)
else:
  numero = numero - 1
  print("Los pares menores o iguales a " +str(numero + 1)+ " son:")
  for numero in range(numero, 1 ,-2):
    print(numero)

# PUNTO 4
numero = int(input("Ingrese un numero natural: "))
inicio : int = 1
fact : int = 1
for inicio in range(1, numero + 1,1):
  for i in range(1, inicio +1):
    fact = fact*i
  print("Fatorial de " +str(inicio)+ " es " +str(fact))
  fact = 1

#PUNTO 5
num_c : int = 2
potencia = int(input("Ingresa el número que desees: "))
numero : int = 2
for i in range(1, potencia, 1):
  num_c = num_c *numero
print("2 elevado a la potencia " +str(potencia)+ " es igual a " +str(num_c))

#PUNTO 6
numero_b = float(input("Ingresa un número real: "))
numero_a = int(input("Ingresa un número natural: "))
b = numero_b
for i in range(1,numero_a):
  numero_b = numero_b * b
print("El numero " +str(b)+" elevado a la potencia " +str(numero_a)+ " es : " +str(numero_b))

#PUNTO 7
for num in range(1,11):
  for f in range(1,11):
    multiplicacion = num * f
    print(str(num)+ " x " +str(f)+ " = " +str(multiplicacion))
  print("Fin de la tabla")

# PUNTO 8
from math import exp, factorial

def aprox_exp(numero: float, n: int)-> float:
  suma: float = 0
  for i in range(0, n+1):
    n_ter = ((numero**i)/(factorial(i)))
    suma += n_ter
  return suma

if __name__ == "__main__":
  numero = float(input("Ingresa un número real "))
  n: int = 1
  aprx: float = aprox_exp(numero, n)
  v_real : float = exp(numero)

while((abs(v_real - aprx)/v_real * 100)>0.1):
  aprx: float = aprox_exp(numero, n)
  n += 1
print("Para que el margen de error sea menor a 0.1  el valor debe ser:" +str(n))
print("La aproximación es " +str(aprx))
print("El valor real es " +str(v_real))

#PUNTO 9
from math import sin, factorial

def aprox_sin(numero: float, n: int)-> float:
  suma: float = 0
  for i in range(0, n+1):
    n_ter = (((-1)**i)*((numero**(2*i+1))/(factorial(2*i+1))))
    suma += n_ter
  return suma

if __name__ == "__main__":
  numero = float(input("Ingresa un número real "))
  n: int = 1
  aprx: float = aprox_sin(numero, n)
  v_real : float = sin(numero)

while((abs(v_real - aprx)/v_real * 100)>0.1):
  aprx: float = aprox_sin(numero, n)
  n += 1
print("Para que el margen de error sea menor a 0.1  el valor debe ser:" +str(n))
print("La aproximación es " +str(aprx))
print("El valor real es " +str(v_real))

#PUNTO 10
from math import factorial
from numpy import arctan

def aprox_arctg(numero: float, n: int)-> float:
  suma: float = 0
  for i in range(0, n+1):
    n_ter = (((-1)**i)*((numero**(2*i+1))/(2*i+1)))
    suma += n_ter
  return suma

if __name__ == "__main__":
  numero = float(input("Ingresa un número real "))
  n: int = 1
  aprx: float = aprox_arctg(numero, n)
  v_real : float = arctan(numero)

while((abs(v_real - aprx)/v_real * 100)>0.1):
  aprx: float = aprox_arctg(numero, n)
  n += 1
print("Para que el margen de error sea menor a 0.1  el valor debe ser:" +str(n))
print("La aproximación es " +str(aprx))
print("El valor real es " +str(v_real))